/*
 * Wallet
 * User application
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.wallet.sdk.api;

import io.wallet.sdk.api.ApiException;
import io.wallet.sdk.model.PartnerSignupUserRequest;
import io.wallet.sdk.model.RestRequest;
import io.wallet.sdk.model.RestResponse;
import io.wallet.sdk.model.SingUpUserRequest;
import io.wallet.sdk.model.User;
import io.wallet.sdk.model.UserBalanceResponse;
import io.wallet.sdk.model.UserListResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserUiResourceApi
 */
//@Ignore
public class UserUiResourceApiTest {

    private final UserUiResourceApi api = new UserUiResourceApi( "", "");

    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingPOSTTest() throws ApiException {
    
    	try{
    	
	        String userId = null;
	        RestRequest request = null;
	        RestResponse response = api.deleteUserUsingPOST(userId, request);
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * getBalance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceUsingGETTest() throws ApiException {
    
    	try{
    	
	        UserBalanceResponse response = api.getBalanceUsingGET();
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * getBalance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceUsingGET1Test() throws ApiException {
    
    	try{
    	
	        String userId = null;
	        UserBalanceResponse response = api.getBalanceUsingGET1(userId);
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * getProfile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfileUsingGETTest() throws ApiException {
    
    	try{
    	
	        User response = api.getProfileUsingGET();
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * getProfile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfileUsingGET1Test() throws ApiException {
    
    	try{
    	
	        User response = api.getProfileUsingGET1();
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * getUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserUsingGETTest() throws ApiException {
    
    	try{
    	
	        String userId = null;
	        User response = api.getUserUsingGET(userId);
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * getUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUsingGETTest() throws ApiException {
    
    	try{
    	
	        Integer limit = null;
	        Integer offset = null;
	        String q = null;
	        UserListResponse response = api.getUsersUsingGET(limit, offset, q);
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * pong
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pongUsingGETTest() throws ApiException {
    
    	try{
    	
	        String response = api.pongUsingGET();
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * postClient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postClientUsingPOSTTest() throws ApiException {
    
    	try{
    	
	        PartnerSignupUserRequest userOfPartnerRequest = null;
	        User response = api.postClientUsingPOST(userOfPartnerRequest);
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
    /**
     * setUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserUsingPOSTTest() throws ApiException {
    
    	try{
    	
	        SingUpUserRequest request = null;
	        RestResponse response = api.setUserUsingPOST(request);
	   }
	   catch(Exception e){
	   }

        // TODO: test validations
    }
    
}
